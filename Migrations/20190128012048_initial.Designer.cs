// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RelativityCapstone.Models;

namespace RelativityCapstone.Migrations
{
    [DbContext(typeof(AirportContext))]
    [Migration("20190128012048_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("RelativityCapstone.Models.Airport", b =>
                {
                    b.Property<int>("id");

                    b.Property<string>("iata_code");

                    b.Property<double>("lat");

                    b.Property<double>("lon");

                    b.Property<string>("name");

                    b.Property<int>("secheduledService");

                    b.HasKey("id");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("RelativityCapstone.Models.Runway", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("airportId");

                    b.Property<int>("beg_lat");

                    b.Property<int>("beg_lon");

                    b.Property<int>("end_lat");

                    b.Property<int>("end_lon");

                    b.Property<int>("headingDeg");

                    b.HasKey("id");

                    b.HasIndex("airportId");

                    b.ToTable("Runways");
                });

            modelBuilder.Entity("RelativityCapstone.Models.WeatherCurrent", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("airportId");

                    b.Property<string>("desc");

                    b.Property<int>("humidity");

                    b.Property<byte[]>("icon");

                    b.Property<int>("temp");

                    b.Property<DateTime>("time");

                    b.Property<string>("type");

                    b.Property<int>("windDeg");

                    b.Property<int>("windSpeed");

                    b.HasKey("id");

                    b.HasIndex("airportId");

                    b.ToTable("CurrentWeather");
                });

            modelBuilder.Entity("RelativityCapstone.Models.WeatherForecast", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("airportId");

                    b.Property<string>("desc");

                    b.Property<int>("humidity");

                    b.Property<byte[]>("icon");

                    b.Property<int>("max_temp");

                    b.Property<int>("min_temp");

                    b.Property<DateTime>("time");

                    b.Property<string>("type");

                    b.Property<int>("windDeg");

                    b.Property<int>("windSpeed");

                    b.HasKey("id");

                    b.HasIndex("airportId");

                    b.ToTable("WeatherForcasts");
                });

            modelBuilder.Entity("RelativityCapstone.Models.Runway", b =>
                {
                    b.HasOne("RelativityCapstone.Models.Airport", "airport")
                        .WithMany("runways")
                        .HasForeignKey("airportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RelativityCapstone.Models.WeatherCurrent", b =>
                {
                    b.HasOne("RelativityCapstone.Models.Airport", "airport")
                        .WithMany("currentWeathers")
                        .HasForeignKey("airportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RelativityCapstone.Models.WeatherForecast", b =>
                {
                    b.HasOne("RelativityCapstone.Models.Airport", "airport")
                        .WithMany("weatherForecasts")
                        .HasForeignKey("airportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
